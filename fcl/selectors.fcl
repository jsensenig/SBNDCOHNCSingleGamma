pdg_selectors: [
   "return true;",
   "{ var match = track.match;
    return match.has_match and (match.match_pdg == 11 or match.match_pdg == -11); }",
   "{ var match = track.match;
    return match.has_match and (match.match_pdg == 13 or match.match_pdg == -13); }",
   "{ var match = track.match;
    return match.has_match and (match.match_pdg == 211 or match.match_pdg == -211); }",
   "{ var match = track.match;
    return match.has_match and (match.match_pdg == 321 or match.match_pdg == -321); }",
   "{ var match = track.match;
    return match.has_match and (match.match_pdg == 2212 or match.match_pdg == -2212); }",
   "{ var match = track.match;
      var pdg = match.match_pdg;
      return match.has_match and 
        (pdg == 2224 or pdg == -2224 or pdg == 2214 or pdg == -2214 or pdg == 1114 or pdg == -1114 or pdg == 3222 or pdg == -3222 or pdg == 3112 or pdg == -3112 
         or pdg > 1000000000); }",
   "{ var match = track.match;
      return !match.has_match or match.match_pdg == 22 or match.match_pdg == 2112 or match.match_pdg == -2212; }"
]

pdgs: ["all", "e", "mu", "pi", "k", "p", "nucl", "none"]

primary_pdg_selectors: [
   "return true;",
   "{ var match = track.match;
    return match.has_match and (match.match_pdg == 13 or match.match_pdg == -13); }",
   "{ var match = track.match;
    return match.has_match and (match.match_pdg == 211 or match.match_pdg == -211); }",
   "{ var match = track.match;
    return match.has_match and (match.match_pdg == 2212 or match.match_pdg == -2212); }"
]
primary_pdgs: ["all", "mu", "pi", "p"]


interaction_selectors: [
   "return true;",
   "{ var match = track.match;
      return match.has_match and match.mctruth_origin == 2 // kCosmicRay
      and mctype == 1;}",
   "{ var match = track.match;
      return match.has_match and match.mctruth_origin == 2 // kCosmicRay
      and mctype == 2;}",
   "{ var match = track.match;
      return match.has_match and match.mctruth_origin == 1 // kBeamNeutrino
      and !match.mctruth_ccnc and track.match.is_primary; }",
   "{ var match = track.match;
      return match.has_match and match.mctruth_origin == 1 // kBeamNeutrino
      and !match.mctruth_ccnc and !track.match.is_primary; }",
   "{ var match = track.match;
      return match.has_match and match.mctruth_origin == 1 // kBeamNeutrino
      and match.mctruth_ccnc and track.match.is_primary; }",
   "{ var match = track.match;
      return match.has_match and match.mctruth_origin == 1 // kBeamNeutrino
      and match.mctruth_ccnc and !track.match.is_primary; }",
   "return !track.match.has_match;"
] 

interactions: ["All", "Cosmic", "InTime-Cosmic", "CC", "CC-Other", "NC", "NC-Other", "No-Match"]

neutrino_selectors: ["",
   "{ var match = track.match;
      return match.has_match and match.mctruth_origin == 1 // kBeamNeutrino
      and !match.mctruth_ccnc and track.match.is_primary; }",
   "{ var match = track.match;
      return match.has_match and match.mctruth_origin == 1 // kBeamNeutrino
      and match.mctruth_ccnc and track.match.is_primary; }",
   "{ var match = track.match;
      return match.has_match and match.mctruth_origin == 1 // kBeamNeutrino 
      and !track.match.is_primary; }"
]
neutrinos: ["All", "CC", "NC", "Other"]

wall_selectors_enter: [
  "return true;",
  "return track.match.has_match and particle.wall_enter == 0",
  "return track.match.has_match and particle.wall_enter == 1",
  "return track.match.has_match and particle.wall_enter == 2",
  "return track.match.has_match and particle.wall_enter == 3",
  "return track.match.has_match and particle.wall_enter == 4",
  "return track.match.has_match and particle.wall_enter == 5",
  "return track.match.has_match and particle.wall_enter == 6"
]
wall_selectors_exit: [
  "return true;",
  "return track.match.has_match and particle.wall_exit == 0",
  "return track.match.has_match and particle.wall_exit == 1",
  "return track.match.has_match and particle.wall_exit == 2",
  "return track.match.has_match and particle.wall_exit == 3",
  "return track.match.has_match and particle.wall_exit == 4",
  "return track.match.has_match and particle.wall_exit == 5",
  "return track.match.has_match and particle.wall_exit == 6"
]

wall_selectors_either: [
  "return true;",
  "return track.match.has_match and (particle.wall_exit == 0 and particle.wall_enter == 0);",
  "return track.match.has_match and (particle.wall_exit == 1 or particle.wall_enter == 1);",
  "return track.match.has_match and (particle.wall_exit == 2 or particle.wall_enter == 2);",
  "return track.match.has_match and (particle.wall_exit == 3 or particle.wall_enter == 3);",
  "return track.match.has_match and (particle.wall_exit == 4 or particle.wall_enter == 4);",
  "return track.match.has_match and (particle.wall_exit == 5 or particle.wall_enter == 5);",
  "return track.match.has_match and (particle.wall_exit == 6 or particle.wall_enter == 6);"
]
walls: ["all", "no-wall", "top", "bottom", "left", "right", "front", "back"]

true_contained_selectors: [
  "return true;",
  "return track.match.has_match and !particle.is_contained;",
  "return track.match.has_match and  particle.is_contained;"
]

reco_contained_selectors: [
  "return true;",
  "return !track.is_contained;",
  "return track.is_contained;"
]

contained: ["all", "exiting", "contained"]

timing_selectors: [
  "return true;",
  "return track.match.has_match and (particle.start_time < 0. or particle.start_time > 1.6);",
  "return track.match.has_match and (particle.start_time >= 0. and particle.start_time <= 1.6);"
]
timings: ["all", "outtime", "intime"]

truth_cut_order: ["Truth", "T_fid", "T_trig", "T_vqual", "T_tqual", "T_reco"]
cut_order: ["Reco", "R_trig", "R_flashtime", "R_fid", "R_goodmcs", "R_flashmatch",
            "R_crttrack", "R_crthit", "R_crtactive", "R_contained", "R_length"]
cut_order_summary: ["Reco", "R_trig", "R_flashtime", "R_flashmatch",
    "R_fid", "R_goodmcs", "R_length","R_contained", 
    "R_crtactive","R_crttrack", "R_crthit"]
cut_order_summary_separate_contained: ["Reco", "R_trig", "R_flashtime", "R_flashmatch",
    "R_fid", "R_goodmcs", "R_length", 
    "R_crttrack", "R_crthit",
    "R_crtactive","R_contained"]
